package com.mpeter.xrandomtweaks.xposed.AIMP;

import android.app.AndroidAppHelper;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Base64;

import com.mpeter.xrandomtweaks.xposed.HookedApp;
import com.mpeter.xrandomtweaks.xposed.XposedModule;

import de.robv.android.xposed.XC_MethodHook;
import de.robv.android.xposed.XposedBridge;
import de.robv.android.xposed.XposedHelpers;
import de.robv.android.xposed.callbacks.XC_LoadPackage;

public class AIMPHooks extends AIMPConstants implements HookedApp {
    public static final String LOG_TAG = XposedModule.getLogtag(AIMPHooks.class);
    public static final String AIMP_LOGO_ENCODED = "";

    @Override
    public void initHooks(final XC_LoadPackage.LoadPackageParam loadPackageParam) {
        XposedHelpers.findAndHookMethod("android.support.v4.media.MediaMetadataCompat$Builder", loadPackageParam.classLoader, "putBitmap", String.class, Bitmap.class, new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                Context context = AndroidAppHelper.currentApplication().getApplicationContext();
//                Bitmap albumArt = BitmapFactory.decodeResource(context.getResources(), context.getResources().getIdentifier("widget_albumart_large", "drawable", context.getPackageName()));
                byte[] asd = Base64.decode(AIMP_LOGO_ENCODED, 0);
                Bitmap albumArt = BitmapFactory.decodeByteArray(asd, 0, asd.length);

                param.args[1] = albumArt;
                XposedBridge.log(LOG_TAG + "albumart set");
                super.beforeHookedMethod(param);
            }
        });

        XposedHelpers.findAndHookMethod("com.aimp.player.service.helpers.MediaButtonHandler", loadPackageParam.classLoader, "getActionByKeyCode", int.class, new XC_MethodHook() {
            @Override
            protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
                Class AppService = XposedHelpers.findClass("com.aimp.player.service.AppService", loadPackageParam.classLoader);

                String fieldActionPause = "ACTION_PAUSE";
                String fieldActionStop = "ACTION_STOP";

                String actionPause = (String) XposedHelpers.getStaticObjectField(AppService, fieldActionPause);
                String actionStop = (String) XposedHelpers.getStaticObjectField(AppService, fieldActionStop);

                if ((int) param.args[0] == 86) {
                    param.setResult(XposedHelpers.getStaticObjectField(
                            AppService, fieldActionStop));
                    XposedBridge.log(LOG_TAG + "action set to STOP from PAUSE");
                }


                super.beforeHookedMethod(param);
            }
        });
    }

    @Override
    public void unHookAll() {

    }
}
